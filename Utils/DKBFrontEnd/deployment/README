What's this?
============

This is an automated script to deploy the latest (more-or-less) node.js
for DKB project.  We run on various OS, mainly CentOS, so have outdated
compilers, node.js itself, etc.  Thus, we're taking recent software and
compiling it on our own: it is sufficient to deploy node.js, since
it is a platform, and after this experiment, install, modify software
inside the platform itself.

This is OK for development, don't know how it will fly for production.
Will see once DKB itself will be close to it.


How to use?
===========

Look inside the top of install.sh, customize to the taste.
Run install.sh, fix problems it reports about, rinse and repeat.
With certain non-zero amount of luck it will be successfully
deployed after ~30 minutes.


What will be installed?
=======================

 - Node.js itself (to BASE/node).
 - Ontodia -- GUI for working with ontology graphs (to BASE/ontodia/git).


DKB frontend deployment
=======================

 - Go to the frontend sources (../src): this is the standard Node.js
   application, so NPM will work there.

 - Run
{{{
npm install
npm build
WEB_PREFIX=/ SPARQL_ENDPOINT=http://nosql.tpu.ru:8890/sparql npm run demo
}}}
   to install dependencies, build the stuff and run the application.
   This should be enough to run/test frontend locally (head to
   http://localhost:10444/ with anything which speaks HTTP
   and is JavaScript-capable: browser, telnet/brain, whatever).

 - To proxy node.js from Apache, you'll probably need to align
   WEB_PREFIX with the URL root where application will be deployed.
   Then use mod_proxy:
{{{
LoadModule proxy_module modules/mod_proxy.so

# Ontodia demo instance
<Location "/dkb/onto-demo">
  ProxyPass "http://localhost:10444/dkb/onto-demo"
  ProxyPassReverse "http://localhost:10444/dkb/onto-demo"
</Location>
}}}
   For such a setup, application must be invoked as
{{{
WEB_PREFIX=/dkb/onto-demo SPARQL_ENDPOINT=http://nosql.tpu.ru:8890/sparql npm run demo
}}}
   Not doing this will bring chaos into existence and doomed will be your
   frontend; thy should try to avoid it.

 - For now, npm is to be spawned manually.  The corresponding automation is on the go,
   but not yet landed into our realms.

 - Port and other parameters can be customized via ../src/package.json: look for
   "scripts" key and if you will need to run node.js in some customized way,
   don't hesitate to add sanely-named target there instead of typing the command
   each time and making others to think "How the hell $IT makes it to run?".

 - We have 'npm run dkb-prod' and 'npm run dkb-dev' to spawn production
   and development instances; the corresponding Apache configuration can be taken
   from ./apache-dkb.conf.

 - We have RESTRICT_GRAPH environment variable to present objects only from given
   graphs.  dkb-prod/dkb-dev uses it with the current graph URL,
   http://nosql.tpu.ru:8890/DAV/ATLAS/new.  One can use dkb-prod-whole/dkb-dev-whole
   to be able to select all existing objects.


Whom to blame?
==============

Me, Eygene Ryabinkin <rea@grid.kiae.ru>.

$Id: README 345 2017-04-27 18:17:11Z rea $
